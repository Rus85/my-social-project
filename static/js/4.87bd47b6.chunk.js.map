{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.jsx","components/Dialogs/Dialogs-container.jsx"],"names":["module","exports","DialogItem","props","className","s","dialogsItems","src","dialogsName","to","id","name","Message","messages","message","Dialogs","dialogsElements","dialogs","map","d","messagesElements","m","initialValues","newMessageBody","onSubmit","values","addMessage","validate","e","errors","length","handleSubmit","submitting","pristine","form","render","input","meta","placeholder","touched","error","shortMessage","type","disabled","compose","connect","state","dialogsPage","newDialogsMessage","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,gC,8FCOjLC,EAAa,SAACC,GAChB,OACI,sBAAKC,UAAWC,IAAEC,aAAlB,UACI,qBAAKC,IAAI,sFACT,qBAAKH,UAAWC,IAAEG,YAAlB,SAA+B,eAAC,IAAD,CAASC,GAAI,UAAYN,EAAMO,GAA/B,cAAqCP,EAAMQ,cAKhFC,EAAU,SAACT,GACb,OACI,qBAAKC,UAAWC,IAAEQ,SAAlB,SAA6BV,EAAMW,WA4F5BC,EAvFC,SAACZ,GAGb,IAAIa,EACAb,EAAMc,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYR,KAAMQ,EAAER,KAAiBD,GAAIS,EAAET,IAAZS,EAAET,OAExDU,EACAjB,EAAMU,SAASK,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAASP,QAASO,EAAEP,SAAcO,EAAEX,OAiChE,OACI,sBAAKN,UAAWC,IAAEY,QAAlB,UACI,qBAAKb,UAAWC,IAAEC,aAAlB,SACKU,IAEL,qBAAKZ,UAAWC,IAAEQ,SAAlB,SACI,8BAAMO,MAGV,cAAC,IAAD,CACIE,cAAe,CAAEC,eAAgB,IACjCC,SA5BQ,SAACC,GACjBtB,EAAMuB,WAAWD,EAAOF,iBA4BhBI,SAzBK,SAACC,GACd,IAAMC,EAAS,GASf,OAPID,EAAEL,gBAAkBK,EAAEL,eAAeO,OAAS,EAC9CD,EAAON,eAAiB,gBAGpBK,EAAEL,gBAAkBK,EAAEL,eAAeO,OAAS,KACtDD,EAAON,eAAkB,kBAElBM,GAYH,SAOK,gBAAGE,EAAH,EAAGA,aAA8BC,GAAjC,EAAiBC,SAAjB,EAA2BC,KAA3B,EAAiCF,YAAjC,OAGG,uBAAMR,SAAUO,EAAhB,UAEI,8BACI,cAAC,IAAD,CACIpB,KAAK,iBACLwB,OAAQ,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OAEJ,gCACI,oDAAcD,GAAd,IAAqBE,YAAY,aAChCD,EAAKE,SAAWF,EAAKG,OAAS,qBAAKpC,UAAWC,IAAEoC,aAAlB,SAAiCJ,EAAKG,gBAKrF,8BACI,wBAAQE,KAAK,SAASC,SAAUX,EAAhC,gC,gCCvEbY,sBAEXC,aApBoB,SAACC,GACrB,MAAO,CACH7B,QAAS6B,EAAMC,YAAY9B,QAC3BJ,SAAUiC,EAAMC,YAAYlC,SAC5BmC,kBAAmBF,EAAMC,YAAYC,sBAMlB,SAACC,GACxB,MAAO,CACHvB,WAAY,SAACH,GACT0B,EAASC,YAAwB3B,SAQzC4B,IAHWP,CAMV7B","file":"static/js/4.87bd47b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3IYMv\",\"dialogsItems\":\"Dialogs_dialogsItems__2HRNJ\",\"active\":\"Dialogs_active__3Uw71\",\"messages\":\"Dialogs_messages__3YMKU\",\"shortMessage\":\"Dialogs_shortMessage__3SJvU\"};","import React from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialogsItems}>\r\n            <img src='https://image.freepik.com/free-vector/businessman-profile-cartoon_18591-58479.jpg' />\r\n            <div className={s.dialogsName}><NavLink to={/dialogs/ + props.id}> {props.name}</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\r\n    let dialogsElements =\r\n        props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\r\n\r\n    let messagesElements =\r\n        props.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n\r\n\r\n    let newMessageElement = React.createRef();\r\n\r\n    let addMessage = () => {\r\n        props.addMessage();\r\n    }\r\n\r\n    let onMessageChange = () => {\r\n        let mess = newMessageElement.current.value;\r\n        props.updateNewDialogsMessage(mess)\r\n\r\n    }\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    const validate = (e) => {\r\n        const errors = {}\r\n\r\n        if (e.newMessageBody && e.newMessageBody.length < 5) {\r\n            errors.newMessageBody = 'SHORT MESSAGE'\r\n       } \r\n       \r\n       else if (e.newMessageBody && e.newMessageBody.length > 10) {\r\n        errors.newMessageBody  = 'MAX SYMBOLS 10'\r\n       }\r\n        return errors\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n\r\n            <Form\r\n                initialValues={{ newMessageBody: '' }}\r\n                onSubmit={addNewMessage}\r\n                validate={validate}\r\n            >\r\n\r\n            \r\n                {({ handleSubmit, pristine, form, submitting }) => (\r\n                    \r\n\r\n                    <form onSubmit={handleSubmit}>\r\n\r\n                        <div>\r\n                            <Field\r\n                                name=\"newMessageBody\"\r\n                                render={({ input, meta }) => (\r\n\r\n                                    <div>\r\n                                        <textarea {...input} placeholder='Message' />\r\n                                        {meta.touched && meta.error && <div className={s.shortMessage}>{meta.error}</div>}\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\" disabled={submitting}>Submit</button>\r\n                        </div>\r\n\r\n                    </form>\r\n                )}\r\n            </Form>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport { addMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newDialogsMessage: state.dialogsPage.newDialogsMessage,\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n\r\n    (Dialogs)\r\n\r\n\r\n"],"sourceRoot":""}